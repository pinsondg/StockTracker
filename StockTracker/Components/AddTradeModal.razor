@inject IPositionService PositionService
@inject IJSRuntime JSRuntime

<div class="modal fade" id="addTradeModal-@Id" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" >Make Trade</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="InitializeForm" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Trade" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <label>
                            Security Type
                        </label>
                        <select disabled="@(InitialSecurity != null)" value="@(Trade.Security != null ? Trade.Security.GetType().Name : "Select Security Type...")" class="form-control" @onchange="@HandleSecuritySelectChange">
                            <option value="">Select Security Type...</option>
                            <option value="Stock">Stock</option>
                            <option value="Option">Option</option>
                            <option value="Dividend">Dividend</option>
                        </select>
                        @if (Trade.Security != null && !(Trade.Security is Dividend))
                        {
                            <label>
                                Buy/Sell
                            </label>
                            <InputSelect class="form-control" @bind-Value="Trade.TradeAction">
                                @*<option value="@null">Select Trade Action...</option>*@
                                @foreach (var action in Enum.GetValues(typeof(TradeAction)))
                                    {
                                    <option value="@action">@action</option>
                                    }
                            </InputSelect>

                        }
                    </div>
                    @if (Trade.Security != null && Trade.Security is Option)
                    {
                        <div class="form-group">
                            <label>
                                Option Type
                            </label>
                            <InputSelect disabled="@(InitialSecurity != null)" class="form-control" @bind-Value="((Option)Trade.Security).Type">
                                @foreach (var type in Enum.GetValues(typeof(Option.OptionType)))
                                    {
                                    <option value="@type">@type</option>
                                    }

                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label>
                                Option Strike ($)
                            </label>
                            <InputNumber disabled="@(InitialSecurity != null)" class="form-control" @bind-Value="((Option)Trade.Security).Strike" />
                        </div>

                        <div class="form-group">
                            <label>
                                Option Expiration
                            </label>
                            <InputDate disabled="@(InitialSecurity != null)" class="form-control" @bind-Value="((Option)Trade.Security).ExpirationDate" />
                        </div>
                    }
                    <div class="form-group">
                        <label>
                            No. Of Shares
                        </label>
                        <InputNumber class="form-control" @bind-Value="Trade.TradeContractCount" />
                    </div>
                    <div class="form-group">
                        <label>
                            Cost Per Contract($)
                        </label>
                        <InputNumber class="form-control" @bind-Value="Trade.TradePricePerContract" />
                    </div>

                    <div class="form-group">
                        <label>
                            Trade Date
                        </label>
                        <InputDate class="form-control" @bind-Value="Trade.TradeDate" />
                    </div>
                    @if (ErrorMessage != null)
                    {
                        <p style="color: red">@ErrorMessage</p>
                    }
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Position position { get; set; }

    [Parameter]
    public Action AfterTradeAdded { get; set; }

    [Parameter]
    public Security InitialSecurity { get; set; }

    [Parameter]
    public string Id { get; set; }

    private Trade Trade;

    private string ErrorMessage = null;

    private void HandleSecuritySelectChange(ChangeEventArgs e)
    {
        switch (e.Value.ToString())
        {
            case "Stock":
                Trade.Security = new Stock() { Position = position, PositionId = position.PositionId };
                break;
            case "Option":
                Trade.Security = new Option() { Position = position, PositionId = position.PositionId, ExpirationDate = DateTime.Now };
                break;
            case "Dividend":
                Trade.Security = new Dividend() { Position = position, PositionId = position.PositionId };
                break;
            default:
                Trade.Security = null;
                break;
        }
    }

    protected override void OnInitialized()
    {
        InitializeForm();
    }

    private void HandleValidSubmit()
    {
        try
        {
            PositionService.MakeTradeOnPosition(position.PositionId, Trade);
            InitializeForm();
            JSRuntime.InvokeVoidAsync("helperFunctions.changeModalState", "addTradeModal-" + Id, "hide");
            AfterTradeAdded.Invoke();
        } catch (Exception e)
        {
            ErrorMessage = e.Message;
        } finally
        {
            OnInitialized();
            StateHasChanged();
        }
    }

    public void InitializeForm()
    {
        Trade = new Trade { TradeDate = DateTime.Now };
        if (InitialSecurity != null)
        {
            Trade.Security = InitialSecurity;
        }
    }

}
